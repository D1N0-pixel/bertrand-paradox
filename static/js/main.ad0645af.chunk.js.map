{"version":3,"sources":["utils/Diagram.js","components/Input.js","components/Button.js","App.js","index.js"],"names":["drawLine","data","ctx","x1","x2","y1","y2","color","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","Input","styled","input","Button","button","Container","div","Control","Count","Percent","Invalid","App","useState","long","whole","longer","setLonger","repeat","setRepeat","invalid","setInvalid","canvasRef","useRef","handleRepeat","num","int","Number","isInteger","randomLine","amount","longCnt","wholeCnt","current","getContext","theta1","Math","random","PI","cos","sin","theta2","len","sqrt","pow","isLong","useEffect","arc","drawCircle","closePath","drawTriangle","ref","width","height","error","value","onChange","e","target","onKeyPress","key","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad0645af.chunk.js","sourcesContent":["export function drawLine(data) {\n  const { ctx, x1, x2, y1, y2, color } = data;\n  ctx.beginPath();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = color;\n\n  ctx.moveTo(x1 + 350, y1 + 350);\n  ctx.lineTo(x2 + 350, y2 + 350);\n\n  ctx.stroke();\n}\n\nexport function drawCircle(ctx) {\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = \"rgb(0, 0, 0)\";\n  ctx.arc(350, 350, 300, 0, Math.PI * 2);\n  ctx.stroke();\n}\n\nexport function drawTriangle(ctx) {\n  ctx.beginPath();\n  ctx.lineWidth = 2;\n  ctx.strokeStyle = \"rgb(0, 0, 0)\";\n  ctx.moveTo(350, 50);\n  ctx.lineTo(350 - 150 * Math.sqrt(3), 500);\n  ctx.lineTo(350 + 150 * Math.sqrt(3), 500);\n  ctx.closePath();\n  ctx.stroke();\n}\n","import styled from \"styled-components\";\n\nconst Input = styled.input`\n  height: 40px;\n  width: 330px;\n  padding: 10px 20px;\n  margin: 0.5rem;\n  border: 2px solid #fcc419;\n  background-color: #efefef;\n  border-radius: 15px;\n  font-size: 16px;\n`;\n\nexport default Input;\n","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  position: relative;\n  width: 373px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin: 0.5rem;\n  background-color: #adb5bd;\n  border: 2px solid #343a40;\n  border-radius: 15px;\n  font-size: 20px;\n  &:active {\n    transform: translateY(2px);\n  }\n  &:hover {\n    background-color: #868e96;\n  }\n`;\n\nexport default Button;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { drawCircle, drawTriangle, drawLine } from \"./utils/Diagram\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  background-color: #efefef;\n  height: 100vh;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Control = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Count = styled.div`\n  font-size: 1.5rem;\n  padding: 0.5rem;\n`;\n\nconst Percent = styled.div`\n  font-size: 1.5rem;\n  padding: 0.5rem;\n`;\n\nconst Invalid = styled.div`\n  font-size: 1rem;\n`;\n\nconst App = () => {\n  const [longer, setLonger] = useState({ long: 0, whole: 0 });\n  const [repeat, setRepeat] = useState(\"1\");\n  const [invalid, setInvalid] = useState(false);\n  const canvasRef = useRef();\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    drawCircle(ctx);\n    drawTriangle(ctx);\n  });\n\n  function handleRepeat(num) {\n    const int = Number(num);\n    if (Number.isInteger(int) && int >= 1 && int <= 4000) {\n      randomLine(int);\n      setInvalid(false);\n    } else {\n      setInvalid(true);\n    }\n  }\n\n  function randomLine(amount, longCnt = 0, wholeCnt = 0) {\n    if (amount) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      const theta1 = Math.random() * Math.PI * 2;\n      const x1 = Math.cos(theta1) * 300;\n      const y1 = Math.sin(theta1) * 300;\n      const theta2 = Math.random() * Math.PI * 2;\n      const x2 = Math.cos(theta2) * 300;\n      const y2 = Math.sin(theta2) * 300;\n      const len = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n      const isLong = len > 300 * Math.sqrt(3);\n      drawLine({\n        ctx,\n        x1,\n        x2,\n        y1,\n        y2,\n        color: isLong ? \"rgb(255, 0 , 0)\" : \"rgb(0, 0, 255)\",\n      });\n      randomLine(amount - 1, longCnt + (isLong ? 1 : 0), wholeCnt + 1);\n    } else {\n      setLonger({\n        long: longer.long + longCnt,\n        whole: longer.whole + wholeCnt,\n      });\n    }\n  }\n\n  return (\n    <Container>\n      <canvas ref={canvasRef} width=\"700\" height=\"700\" />\n      <Control>\n        <Count>\n          {longer.long} / {longer.whole}\n        </Count>\n        <Percent>\n          {longer.whole ? (longer.long / longer.whole) * 100 : 0}%\n        </Percent>\n        <Input\n          error={invalid}\n          value={repeat}\n          onChange={(e) => setRepeat(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              handleRepeat(repeat);\n            }\n          }}\n          type=\"text\"\n        />\n        <Button\n          onClick={() => {\n            handleRepeat(repeat);\n          }}\n        >\n          선 그리기\n        </Button>\n        {invalid && (\n          <Invalid>잘못된 입력이거나 범위(1~4000)을 벗어난 값입니다</Invalid>\n        )}\n      </Control>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}