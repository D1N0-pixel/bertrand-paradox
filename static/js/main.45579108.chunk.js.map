{"version":3,"sources":["utils/Diagram.js","components/Input.js","components/Button.js","App.js","index.js"],"names":["drawLine","data","ctx","x1","x2","y1","y2","color","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","Input","styled","input","Button","button","Container","div","Control","Count","Percent","Invalid","App","useState","long","whole","longer","setLonger","repeat","setRepeat","invalid","setInvalid","canvasRef","useRef","handleRepeat","num","isNaN","Number","randomLine","amount","longCnt","wholeCnt","current","getContext","Math","random","sqrt","pow","floor","len","isLong","useEffect","arc","PI","drawCircle","closePath","drawTriangle","ref","width","height","error","value","onChange","e","target","type","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAAO,SAASA,EAASC,GAAM,IACpBC,EAA8BD,EAA9BC,IAAKC,EAAyBF,EAAzBE,GAAIC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,GAAIC,EAAaL,EAAbK,GAAIC,EAASN,EAATM,MAC5BL,EAAIM,YACJN,EAAIO,UAAY,EAChBP,EAAIQ,YAAcH,EAElBL,EAAIS,OAAOR,EAAK,IAAKE,EAAK,KAC1BH,EAAIU,OAAOR,EAAK,IAAKE,EAAK,KAE1BJ,EAAIW,S,yBCIOC,EAXDC,IAAOC,MAAV,gOCqBIC,EArBAF,IAAOG,OAAV,0Y,OCINC,EAAYJ,IAAOK,IAAV,4JAQTC,EAAUN,IAAOK,IAAV,6EAKPE,EAAQP,IAAOK,IAAV,8EAKDG,EAAUR,IAAOK,IAAV,0EAKXI,EAAUT,IAAOK,IAAV,kDA+DEK,EA3DH,WAAO,IAAD,EACcC,mBAAS,CAACC,KAAM,EAAGC,MAAO,IADxC,mBACPC,EADO,KACCC,EADD,OAEcJ,mBAAS,KAFvB,mBAEPK,EAFO,KAECC,EAFD,OAGgBN,oBAAS,GAHzB,mBAGPO,EAHO,KAGEC,EAHF,KAIRC,EAAYC,mBAOlB,SAASC,EAAaC,GACdC,MAAMD,IAECE,OAAOF,IAAQ,GAAKE,OAAOF,GAAO,IADzCJ,GAAW,IAIXO,EAAWD,OAAOF,IAClBJ,GAAW,IAInB,SAASO,EAAWC,GAAoC,IAA5BC,EAA2B,uDAAjB,EAAGC,EAAc,uDAAH,EAChD,GAAIF,EAAQ,CACR,IAAMxC,EAAMiC,EAAUU,QAAQC,WAAW,MACnC3C,EAAqB,IAAhB4C,KAAKC,SAAiB,IAC3B3C,EAAK0C,KAAKE,KAAKF,KAAKG,IAAI,IAAK,GAAKH,KAAKG,IAAI/C,EAAI,KAAuC,IAAhC4C,KAAKI,MAAoB,EAAdJ,KAAKC,UAAoB,GAAK,GAC/F5C,EAAqB,IAAhB2C,KAAKC,SAAiB,IAC3B1C,EAAKyC,KAAKE,KAAKF,KAAKG,IAAI,IAAK,GAAKH,KAAKG,IAAI9C,EAAI,KAAuC,IAAhC2C,KAAKI,MAAoB,EAAdJ,KAAKC,UAAoB,GAAK,GAC/FI,EAAML,KAAKE,KAAKF,KAAKG,IAAI9C,EAAKD,EAAI,GAAK4C,KAAKG,IAAI5C,EAAKD,EAAI,IACzDgD,EAASD,EAAM,IAAML,KAAKE,KAAK,GACrCjD,EAAS,CAACE,MAAKC,KAAIC,KAAIC,KAAIC,KAAIC,MAAO8C,EAAS,kBAAoB,mBACnEZ,EAAWC,EAAS,EAAGC,GAAWU,EAAS,EAAI,GAAIT,EAAW,QAE9Dd,EAAU,CACNH,KAAME,EAAOF,KAAOgB,EACpBf,MAAOC,EAAOD,MAAQgB,IAKlC,OApCAU,qBAAU,WACN,IAAMpD,EAAMiC,EAAUU,QAAQC,WAAW,OH3B1C,SAAoB5C,GACvBA,EAAIM,YACJN,EAAIO,UAAY,EAChBP,EAAIQ,YAAc,eAClBR,EAAIqD,IAAI,IAAK,IAAK,IAAK,EAAa,EAAVR,KAAKS,IAC/BtD,EAAIW,SGuBA4C,CAAWvD,GHpBZ,SAAsBA,GACzBA,EAAIM,YACJN,EAAIO,UAAY,EAChBP,EAAIQ,YAAc,eAClBR,EAAIS,OAAO,IAAK,IAChBT,EAAIU,OAAO,IAAM,IAAMmC,KAAKE,KAAK,GAAI,KACrC/C,EAAIU,OAAO,IAAM,IAAMmC,KAAKE,KAAK,GAAI,KACrC/C,EAAIwD,YACJxD,EAAIW,SGaA8C,CAAazD,MAkCb,eAACiB,EAAD,WACI,wBAAQyC,IAAKzB,EAAW0B,MAAM,MAAMC,OAAO,QAC3C,eAACzC,EAAD,WACI,eAACC,EAAD,WAAQO,EAAOF,KAAf,MAAwBE,EAAOD,SAC/B,eAACL,EAAD,WAAUM,EAAOD,MAAQC,EAAOF,KAAOE,EAAOD,MAAQ,IAAM,EAA5D,OACA,cAAC,EAAD,CACImC,MAAO9B,EACP+B,MAAOjC,EACPkC,SAAU,SAACC,GAAD,OAAOlC,EAAUkC,EAAEC,OAAOH,QACpCI,KAAK,SACT,cAAC,EAAD,CAAQC,QAAS,WAAOhC,EAAaN,IAArC,uCACCE,GAAW,cAACT,EAAD,8IClF5B8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.45579108.chunk.js","sourcesContent":["export function drawLine(data){\n    const {ctx, x1, x2, y1, y2, color} = data;\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = color;\n    \n    ctx.moveTo(x1 + 350, y1 + 350);\n    ctx.lineTo(x2 + 350, y2 + 350);\n    \n    ctx.stroke();\n}\n\nexport function drawCircle(ctx){\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"rgb(0, 0, 0)\"\n    ctx.arc(350, 350, 300, 0, Math.PI * 2);\n    ctx.stroke();\n}\n\nexport function drawTriangle(ctx){\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"rgb(0, 0, 0)\"\n    ctx.moveTo(350, 50);\n    ctx.lineTo(350 - 150 * Math.sqrt(3), 500);\n    ctx.lineTo(350 + 150 * Math.sqrt(3), 500);\n    ctx.closePath();\n    ctx.stroke();\n}","import styled from \"styled-components\";\n\nconst Input = styled.input`\n    height: 40px;\n    width: 330px;\n    padding: 10px 20px;\n    margin: 0.5rem;\n    border: 2px solid #fcc419;\n    background-color: #efefef;\n    border-radius: 15px;\n    font-size: 16px;\n`;\n\nexport default Input;","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  position: relative;\n  width: 373px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin: 0.5rem;\n  background-color:#adb5bd;\n  border: 2px solid #343a40;\n  border-radius: 15px;\n  font-size: 20px;\n  &:active {\n    transform: translateY(2px);\n  }\n  &:hover {\n    background-color: #868e96;\n  }\n`;\n\nexport default Button;","import React, {useRef, useEffect, useState} from \"react\";\nimport {drawCircle, drawTriangle, drawLine} from \"./utils/Diagram\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\"\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    display: flex;\n    background-color: #efefef;\n    height: 100vh;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Control = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Count = styled.div`\n    font-size: 1.5rem;\n    padding: 0.5rem;\n    `;\n    \n    const Percent = styled.div`\n    font-size: 1.5rem;\n    padding: 0.5rem;\n`;\n\nconst Invalid = styled.div`\n    font-size: 1rem;\n`;\n\nconst App = () => {\n    const [longer, setLonger] = useState({long: 0, whole: 0});\n    const [repeat, setRepeat] = useState(\"0\");\n    const [invalid, setInvalid] = useState(false); \n    const canvasRef = useRef();\n    useEffect(() => {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        drawCircle(ctx);\n        drawTriangle(ctx);\n    });\n\n    function handleRepeat(num) {\n        if (isNaN(num)) {\n            setInvalid(true);\n        } else if (Number(num) <= 0 || Number(num) > 4000) {\n            setInvalid(true);\n        } else {\n            randomLine(Number(num));\n            setInvalid(false);\n        }\n    }\n\n    function randomLine(amount, longCnt = 0, wholeCnt = 0) {\n        if (amount) {\n            const ctx = canvasRef.current.getContext(\"2d\");\n            const x1 = Math.random() * 600 - 300;\n            const y1 = Math.sqrt(Math.pow(300, 2) - Math.pow(x1, 2)) * (Math.floor(Math.random()*2) === 1 ? 1 : -1);\n            const x2 = Math.random() * 600 - 300;\n            const y2 = Math.sqrt(Math.pow(300, 2) - Math.pow(x2, 2)) * (Math.floor(Math.random()*2) === 1 ? 1 : -1);\n            const len = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n            const isLong = len > 300 * Math.sqrt(3);\n            drawLine({ctx, x1, x2, y1, y2, color: isLong ? 'rgb(255, 0 , 0)' : 'rgb(0, 0, 255)'});\n            randomLine(amount - 1, longCnt + (isLong ? 1 : 0), wholeCnt + 1);\n        } else {\n            setLonger({\n                long: longer.long + longCnt,\n                whole: longer.whole + wholeCnt\n            });\n        }\n    }\n                \n    return (\n        <Container>\n            <canvas ref={canvasRef} width=\"700\" height=\"700\"/>\n            <Control>\n                <Count>{longer.long} / {longer.whole}</Count>\n                <Percent>{longer.whole ? longer.long / longer.whole * 100 : 0}%</Percent>\n                <Input \n                    error={invalid}\n                    value={repeat}\n                    onChange={(e) => setRepeat(e.target.value)}\n                    type=\"text\"/>\n                <Button onClick={() => {handleRepeat(repeat)}}>선 그리기</Button>\n                {invalid && <Invalid>잘못된 입력이거나 범위(1~4000)을 벗어난 값입니다</Invalid>}\n            </Control>\n        </Container>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}